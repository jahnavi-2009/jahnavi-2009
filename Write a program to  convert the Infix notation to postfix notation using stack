#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the maximum size of the stack
#define MAX_STACK_SIZE 100

// Function to check if a character is an operator (+, -, *, /, ^)
int isOperator(char ch) {
return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

// Function to determine the precedence of an operator
int precedence(char ch) {
if (ch == '^')
return 3;
else if (ch == '*' || ch == '/')
return 2;
else if (ch == '+' || ch == '-')
return 1;
else
return 0; // Lower precedence for non-operators
}

// Function to convert infix expression to postfix
void infixToPostfix(char infix[], char postfix[]) {
char stack[MAX_STACK_SIZE];
int top = -1; // Initialize stack top to -1

int i, j = 0;

for (i = 0; infix[i] != '\0'; i++) {
char ch = infix[i];

if (isalnum(ch)) {
postfix[j++] = ch; // If character is operand, add to postfix
} else if (ch == '(') {
stack[++top] = ch; // Push opening parenthesis onto stack
} else if (ch == ')') {
while (top >= 0 && stack[top] != '(') {
postfix[j++] = stack[top--]; // Pop operators until '(' is found
}
if (top >= 0 && stack[top] == '(') {
top--; // Pop the '('
}
} else {
// Character is an operator
while (top >= 0 && precedence(stack[top]) >= precedence(ch)) {
postfix[j++] = stack[top--]; // Pop higher or equal precedence operators
}
stack[++top] = ch; // Push the current operator onto stack
}
}

// Pop any remaining operators from the stack and add to postfix
while (top >= 0) {
postfix[j++] = stack[top--];
}

postfix[j] = '\0'; // Null-terminate the postfix expression
}

int main() {
char infix[MAX_STACK_SIZE];
char postfix[MAX_STACK_SIZE];

printf("Enter an infix expression: ");
gets(infix); // Input infix expression (without spaces)

infixToPostfix(infix, postfix);

printf("Postfix expression: %s\n", postfix);

return 0;
}
